---
title: "Team6"
format: html
---

Importing required libraries

```{python}
import numpy as np 
import pandas as pd 
import os 


## Import data visualization packages
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import warnings
warnings.filterwarnings('ignore')
```

Reading Dataset
```{python}
#datapath  = os.getcwd()
fileName = 'Dataset/bank-full.csv'
bankdata = pd.read_csv(fileName, sep = ';')
bankdata.head(5)
```
# Input Variables 
## bank client data:

1. - age (numeric)
2. - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')
3. - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)
4. - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')
5. - default: has credit in default? (categorical: 'no','yes','unknown')
6. - housing: has housing loan? (categorical: 'no','yes','unknown')
7. - loan: has personal loan? (categorical: 'no','yes','unknown')
## related with the last contact of the current campaign:

8. - contact: contact communication type (categorical: 'cellular','telephone')
9. - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')
10. - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')
11. - duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.
## other attributes:

12. - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)
13. - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)
14. - previous: number of contacts performed before this campaign and for this client (numeric)
15. - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')
## social and economic context attributes
16. - emp.var.rate: employment variation rate - quarterly indicator (numeric)
17. - cons.price.idx: consumer price index - monthly indicator (numeric)
18. - cons.conf.idx: consumer confidence index - monthly indicator (numeric)
19. - euribor3m: euribor 3 month rate - daily indicator (numeric)
20. - nr.employed: number of employees - quarterly indicator (numeric)

# Output variable (desired target):

21. - y - has the client subscribed a term deposit? (binary: 'yes','no')
# About Data
Let's look at the percentage of people who have/have not subscribed to term deposit in our dataset
```{python}
def pieChart(x_var,title):
    yesNo = bankdata.groupby(x_var).size()
    yesNo.plot(kind='pie', title=title, figsize=[8,8],
          autopct=lambda p: '{:.2f}%({:.0f})'.format(p,(p/100)*yesNo.sum()))
    plt.show()

pieChart('y','Percentage of yes and no target(term deposit)in dataset')
```

Convert Y as binary 
```{python}
bankdata['y'] = bankdata['y'].apply(lambda x: 0 if x == 'no' else 1)
```

# Data Cleaning 
```{python}
bankdata.info()
```
## Null Values 
Checking for null values in our dataset
```{python}
bankdata.isnull().sum()
```
No null values, but there are values such as, unknown and others as seen from the description
## Unknown Values

### poutcome
* poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success'


```{python}
pieChart('poutcome','Distribution of poutcome in dataset')
bankdata.poutcome.value_counts()
#bankdata.groupby('poutcome').size()
```

There are *36959   unknown* values and  1840 values with other category.
Since, 82% of entries are unknown, 4.07% other, we will directly drop this column. 

### Contact

```{python}
def barDistribution(x,y):
    #x,y = 'contact', 'y'
    df1 = bankdata.groupby(x)[y].value_counts(normalize=True)
    df1 = df1.mul(100)
    df1 = df1.rename('percent').reset_index()
    print(df1)
    g = sns.catplot(x=x,y='percent',hue=y,kind='bar',data=df1)
    g.ax.set_ylim(0,100)

    for p in g.ax.patches:
        txt = str(p.get_height().round(2)) + '%'
        txt_x = p.get_x() 
        txt_y = p.get_height()
        g.ax.text(txt_x,txt_y,txt)
```
```{python}
barDistribution('contact','y')
```
Contact: contact communication type (categorical: 'cellular','telephone')
```{python}
bankdata['contact'].value_counts()
```

There are *13020 unknown values* in communication mode
Since the distribution of cellular and telephone contact is almost similar, we will simply drop this column. 

# EDA
## Related with last contact of current campaign 
```{python}

```
### Correlation Plot
```{python}
corr_data = bankdata[['contact','month','day','duration','campaign','pdays','previous','poutcome','y']]
corr = corr_data.corr()

cor_plot = sns.heatmap(corr,annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':10})
fig=plt.gcf()
fig.set_size_inches(6,5)
plt.xticks(fontsize=10,rotation=-30)
plt.yticks(fontsize=10)
plt.title('Correlation Matrix')
plt.show()
```