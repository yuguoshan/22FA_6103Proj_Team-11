---
title: "AN ANALYSIS OF PORTUGUESE BANK MARKETING DATA "
author: "TEAM 11: Anjali Mudgal , Guoshan Yu and Medhasweta Sen"
date: "November 21, 2022"
subtitle : "The George Washington University (DATS 6103: An Introduction to Data Mining)"
format:
  html:
    smooth-scroll: true
    toc-location: left
    code-fold: true
    number-sections: true
    toc: true
    toc-depth: 3
    toc-float: true
jupyter: python3
order: true
---              

# INTRODUCTION

Bank marketing is the practice of attracting and acquiring new customers through traditional media and digital media strategies. The use of these media strategies helps determine what kind of customer is attracted to a certain institutions. This also includes different banking institutions purposefully using different strategies to attract the type of customer they want to do business with.

As a discipline, marketing has evolved over the past few decades to become what it is today. Earlier, marketing strategies were primarily a means of spreading brand awareness. Today, marketing has been reinvented to fit a much bigger role. Creating both value and revenue to the institution. It is a big step up from its previous communication role, no doubt. One that was necessitated by the evolution of three factors: the consumer, the technology, and data analytics.

Marketing has evolved from a communication role to a revenue generating role. The consumer has evolved from being a passive recipient of marketing messages to an active participant in the marketing process. Technology has evolved from being a means of communication to a means of data collection and analysis. Data analytics has evolved from being a means of understanding the consumer to a means of understanding the consumer and the institution.

Bank marketing strategy is increasingly focused on digital channels, including social media, video, search and connected TV. As bank and credit union marketers strive to promote brand awareness, they need a new way to assess channel ROI and more accurate data to enable personalized offers. Add to that the growing importance of purpose-driven marketing.

The relentless pace of digitization is disrupting not only the established order in banking, but bank marketing strategies. Marketers at both traditional institutions and digital disruptors are feeling the pressure.

Just as bank marketers begin to master one channel, consumers move to another. Many now toggle between devices on a seemingly infinite number of platforms, making it harder than ever for marketers to pin down the right consumers at the right time in the right place.

![](expected-marketing-budget-changes-by-channel.png)

## The Data Set

The data set used in this analysis is from a Portuguese bank. The data set contains 41,188 observations and 21 variables. The variables include the following:

1. - age (numeric)
2. - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')
3. - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)
4. - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')
5. - default: has credit in default? (categorical: 'no','yes','unknown')
6. - housing: has housing loan? (categorical: 'no','yes','unknown')
7. - loan: has personal loan? (categorical: 'no','yes','unknown')
8. - contact: contact communication type (categorical: 'cellular','telephone')
9. - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')
10. - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')
11. - duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.
12. - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)
13. - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)
14. - previous: number of contacts performed before this campaign and for this client (numeric)
15. - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')
16. - emp.var.rate: employment variation rate - quarterly indicator (numeric)
17. - cons.price.idx: consumer price index - monthly indicator (numeric)
18. - cons.conf.idx: consumer confidence index - monthly indicator (numeric)
19. - euribor3m: euribor 3 month rate - daily indicator (numeric)
20. - nr.employed: number of employees - quarterly indicator (numeric)
21. - balance - average yearly balance, in euros (numeric)
22. - y - has the client subscribed a term deposit? (binary: 'yes','no')

## The SMART Questions

The SMART questions are as follows:

## Importing the libraries

```{python}
import numpy as np 
import pandas as pd 
import os 
import matplotlib.pyplot as plt
%matplotlib inline
import warnings

from scipy.stats import zscore
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.stats.api as sms
import statsmodels.stats.multicomp as mc
import statsmodels.stats.outliers_influence as influence
import statsmodels.stats.diagnostic as diag
import statsmodels.stats.stattools as stattools
import statsmodels.stats.anova as anova
import statsmodels.stats.weightstats as weightstats
import statsmodels.stats.libqsturng as libqsturng
import statsmodels.stats.power as power
import statsmodels.stats.proportion as proportion
import statsmodels.stats.contingency_tables as contingency_tables
import statsmodels.stats.multitest as multitest
import statsmodels.stats.diagnostic as diagnostic
import statsmodels.stats.correlation_tools as correlation_tools
from statsmodels.formula.api import ols
import researchpy as rp
import scipy.stats as stats
import seaborn as sns
# Import label encoder
from sklearn import preprocessing
warnings.filterwarnings('ignore')
sns.set_theme(style="whitegrid")
```

```{python}
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
```
## Importing the dataset

```{python}
inputFile = "primary.csv"
df = pd.read_csv(inputFile)
```

## Basic Information about the data

```{python}
print(df.shape)
print(df.head())
print(df.tail())
print(df.columns)
print(df.shape)
print(df.dtypes)
print(df.isnull().sum())
print(df.isnull().sum().sum())
print(df.info())
print(df.describe())
```


# Exploratory Data Analysis (EDA)
## Analysing the variables 
### Job Description

```{python}
# JOB
plt.figure(figsize = (8, 5))
sns.countplot(data=df,y='job',hue='y')
plt.title("Type of Job Distribution")
```

People in management, technical are more likely to subscibe to the term deposit  


### Marital 
```{python}
# MARITAL
plt.figure(figsize = (8, 5))
sns.countplot(data=df,y='marital',hue='y')
plt.title("Type of marital Distribution")
```

```{python}
# EDUCATION 
plt.figure(figsize = (8, 5))
sns.countplot(data=df,y='education',hue='y')
plt.title("Type of education Distribution")
```

### Loan
```{python}
# DEFAULT
sns.countplot(data=df,y='default',hue='y')
plt.title("Type of default Distribution")
```

So people who do not paid back there loans and have credits, have not subcribed to the term deposit. 

```{python}
# HOUSING
sns.countplot(data=df,y='housing',hue='y')
plt.title("Type of housing Distribution")
```
```{python}
# LOAN
sns.countplot(data=df,y='loan',hue='y')
plt.title("Type of Loan Distribution")
```

* people who have loans are subscribing to term deposit less. 

### Contact
```{python}
# CONTACT
sns.countplot(data=df,y='contact',hue='y')
plt.title("Type of Contact Distribution")
```
* since the type of communication(cellular and telephone) is not really a good indicator of subcription, we drop this variable.  

#### Month
```{python}
# MONTH
sns.countplot(x ='month',hue='y', data = df)
plt.title("Type of Months Distribution")
```




```{python}

def pieChart(x_var,title):
    yesNo = df.groupby(x_var).size()
    yesNo.plot(kind='pie', title=title, figsize=[8,8],
          autopct=lambda p: '{:.2f}%({:.0f})'.format(p,(p/100)*yesNo.sum()))
    plt.show()
```

### Term Deposit 
Distribution of y(target) variable 
```{python}

pieChart('y','Percentage of yes and no target(term deposit)in dataset')
```

only 11.7% of enteries are for y=1, so our dataset is unbalanced. 

```{python}


# POUTCOME
pieChart('poutcome','Distribution of poutcome in dataset')
df.poutcome.value_counts()
df.groupby('poutcome').size()
```

There are *36959   unknown* values and  1840 values with other category.
Since, 82% of entries are unknown, 4.07% other, we will directly drop this column. 



## Age, duration and balance
```{python}
# plotting violen plot for duration and balance 

f, axes = plt.subplots(1, 2,sharex=True)
axes[0].set_title('For duration')
sns.violinplot( x='y',y='duration',  split=True, inner="quart", ax=axes[0], data=df)
axes[1].set_title('For balance')
sns.violinplot( x='y',y='balance',  split=True, inner="quart", ax=axes[1], data=df)
sns.despine(left=True)
plt.show()
```

* There are outliers in duration and balance so we need to get rid of them. 
* people who have a high balance, are more likely to subscribe to term deposit. 

```{python}
sns.violinplot( x='y',y='age',  split=True, inner="quart", data=df)
plt.show()
```

* No outliers 
* People who are old are more likely to subscribe to term deposit. 


### Day 

# Summary  
## Data Cleaning 

* Contact is not useful so we drop it.
* In poutcome, we have a lot of missing values so we drop it.  
* Day is not giving any relevant infomation so we drop it. 
* Removing the unknowns 
* Remove the outliers from balance and duration.

## Data Visualization

# Data Cleaning 

## Dropping the column 
```{python}
clean_data = df.drop(['contact','poutcome','day'],axis=1)
```


## Removing unknown from job and education
```{python}
for i in clean_data.columns:
    if clean_data[i].dtype == np.int64:
        pass
    else:
        
        # printing names and count using loop.
        for idx, name in enumerate(clean_data[i].value_counts().index.tolist()):
            if name == 'unknown' or name == 'other':
                print(f"for {i}")
                print(f"{name} : {clean_data[i].value_counts()[idx]}")
                if clean_data[i].value_counts()[idx] < 15000:
                    print(f"dropping rows with value as {name} in {i}")
                    clean_data = clean_data[clean_data[i] != name]
```
## Dropping the rows 


### Dropping the rows where values are 3SD away 

*Balance - Outliers* 

```{python}
standard_deviation = clean_data[['balance']].std()
mean = clean_data[['balance']].mean()
clean_data['balance_outliers'] = clean_data['balance']
clean_data['balance_outliers']= zscore(clean_data['balance_outliers'])
print(f"removing entries before {mean - 3*standard_deviation } and after {mean + 3*standard_deviation }")
three_SD = (clean_data['balance_outliers']>3) | (clean_data['balance_outliers']<-3 )
clean_data = clean_data.drop(clean_data[three_SD].index, axis = 0, inplace = False)
clean_data = clean_data.drop('balance_outliers', axis=1)
```

*Duration - Outliers*

### Dropping rows where the duration of calls is less than 5sec since that is irrelevant 
```{python}
less_5 = (clean_data['duration']<5)
clean_data = clean_data.drop(clean_data[less_5].index, axis = 0, inplace = False)
```

Changing unit of duration from seconds to minutes to make more sense

```{python}
clean_data['duration'] = clean_data['duration'].apply(lambda n:n/60).round(2)
```

# Data Visualization 

### Contact versus Subscription month wise

### Number of calls versus Duration and affect on subscription
```{python}
import seaborn as sns
dur_cam = sns.lmplot(x='duration', y='campaign',data = clean_data,
                     hue = 'y',
                     fit_reg = False,
                     scatter_kws={'alpha':0.6}, height =7)

plt.axis([0,65,0,65])
plt.ylabel('Number of Calls')
plt.xlabel('Duration of Calls (Minutes)')
plt.title('The Relationship between the Number and Duration of Calls (with y)')

# Annotation
plt.axhline(y=5, linewidth=2, color="k", linestyle='--')
plt.annotate('Higher subscription rate when number of calls <5 ',xytext = (35,13),
             arrowprops=dict(color = 'k', width=1),xy=(30,6))
plt.show()
```

Checking between pdays and previous as well

13. - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)
14. - previous: number of contacts performed before this campaign and for this client (numeric)
```{python}
import seaborn as sns
dur_cam = sns.lmplot(x='pdays', y='previous',data = clean_data,
                     hue = 'y',
                     fit_reg = False,
                     scatter_kws={'alpha':0.6}, height =7)

# plt.axis([0,65,0,65])
plt.ylabel('pdays')
plt.xlabel('previous')
plt.title('The Relationship between number of contacts  and last contactbefore this campaign (with y)')

plt.show()
```

### Smart Question 
Based on last contact info only number of contacts performed during this campaign is contributing a lot towards subscription rates. 


### Month wise subscription
```{python}
#converting y values 
# bankdata['y'] = bankdata['y'].apply(lambda x: 'no' if x == 'yes' else 1)
# bankdata['y'] = bankdata['y'].astype('category')

#value count for each month
month = clean_data['month'].value_counts().rename_axis('month').reset_index(name='counts')
#for sequencing the month
m1_list=['jan','feb','mar','apr','may','jun','jul','aug','sep','nov','dec']
m1=pd.DataFrame(m1_list,columns=['month'])
#now the dataset is sequeced
month = m1.merge(month)
#month - counts
#% of people contacted in that month 
month['Contact Rate'] = month['counts']*100/month['counts'].sum()
#percentage of people contacted in that month 
# y response 
month_y = pd.crosstab(clean_data['y'],clean_data['month']).apply(lambda x: x/x.sum() * 100)
#% of 0 and 1 for each month 
month_y = month_y.transpose()
month_y.rename(columns = {'y':'month',0:'no', 1:'yes'}, inplace = True)

# month_y
# y | no% | yes%
```
```{python}
#month = month.merge(month_y)
month['yes'] = " "
month['no'] = " "
#to make it in sequence 
def addingCrossTab(): 
    for i, val in enumerate(m1_list):
        #print (i, ",",val)
        month['yes'].iloc[i]=month_y.loc[val].loc['yes']
        #print(month_y.loc[val].loc['yes'])
        month['no'].iloc[i]=month_y.loc[val].loc['no']
        
addingCrossTab()  
#print(month)      
#print(month_y)
# month['Subscription Rate'] = month_y['yes']
# month['% NotSubscription'] = month_y['no']
month.rename(columns = {'yes':'Subscription Rate','no':'NotSubscribed Rate'}, inplace = True)
#month.drop('month_int',axis = 1,inplace = True)
print(month)
```

```{python}
plot_month = month[['month','Subscription Rate','Contact Rate']].plot(x='month',kind ='line',
                                                          figsize = (10,6),
                                                          marker = 'o')

plt.title('Subscription vs. Contact Rate by Month')
plt.ylabel('Subscription and Contact Rate')
plt.xlabel('Month')

```

Maximum percentage of people have subscribed in the month of March but bank is contacting people more in the month of May. 
So it's better to contact customer's based on the subcription rate plot. 

# Checking the Financially stable population
```{python}
data_vis = clean_data
```
## Job 
```{python}
y_job = pd.crosstab(data_vis['y'],data_vis['job']).apply(lambda x: x/x.sum() * 100)
y_job = y_job.transpose()

y_job.rename(columns = {'y':'job',0:'no', 1:'yes'}, inplace = True)
jobs_sub = y_job['yes'].sort_values(ascending = True).plot(kind ='barh')
                                                                               
plt.title('Subscription Rate by Job')
plt.xlabel('Subscription Rate')
plt.ylabel('Job Category')
# Label each bar
for patch_i, label in zip(jobs_sub.patches,
                      y_job['yes'].sort_values(ascending = True).round(1).astype(str)):
    jobs_sub.text(patch_i.get_width()+1.5, 
                  patch_i.get_y()+ patch_i.get_height()-0.5, 
                  label+'%', 
                  ha = 'center', 
                  va='bottom')
```

```{python}

job_contact=  data_vis['job'].value_counts().rename_axis('job').reset_index(name='counts')        
job_contact['Contact Rate']= job_contact['counts']*100/job_contact['counts'].sum()  
job_contact['Contact Rate'] = job_contact['Contact Rate'].round(2)
job_contact=job_contact.drop(['counts'],axis=1)

# job_contact['Contact Rate']= job_contact['Contact Rate'].sort_values(ascending = False)
job_contact_plot = job_contact.plot(x='job',kind ='barh')  
#.plot(kind ='barh')                                                
plt.title('Contact Rate by Job')
plt.xlabel('Contact Rate')
plt.ylabel('Job Category')
# Label each bar
for patch_i, label in zip(job_contact_plot.patches,
                      job_contact['Contact Rate'].astype(str)):
    job_contact_plot.text(patch_i.get_width()+1.5, 
                  patch_i.get_y()+ patch_i.get_height()-0.5, 
                  label+'%', 
                  ha = 'center', 
                  va='bottom')
```

People in blue color and managemnet jobs are contacted more, which should not be the case. 

## Balance
```{python}
#max = 10399
#min = -6847
def balance_group(bal):
    balGroup = 'Negative' if bal < 0 else 'low balance' if bal < 1000 else 'moderate balance' if bal < 2500 else 'high balance'
    return balGroup
data_vis['balGroup'] = data_vis['balance'].apply(balance_group)

```

checking the subscription based on y value 
```{python}
y_balance = pd.crosstab(data_vis['y'],data_vis['balGroup']).apply(lambda x: x/x.sum() * 100)
y_balance = y_balance.transpose()
```


Cheking the subscriptions in each balance groups 
```{python}
bal = pd.DataFrame(data_vis['balGroup'].value_counts().rename_axis('balGroup').reset_index(name='counts'))
bal_y = bal.merge(y_balance,on='balGroup')

bal_y['% Contacted'] = bal_y['counts']*100/bal_y['counts'].sum()
bal_y['% Subscription'] = bal_y[1]
bal_y.rename(columns = {'y':'month',0:'no', 1:'yes'}, inplace = True)

bal_y = bal_y.drop(['counts','no','yes'],axis=1)
print(bal_y)

bal_list = ['Negative','low balance', 'moderate balance','high balance']
balanceGroupInfo =pd.DataFrame(bal_list,columns=['balanceGroup'])
balanceGroupInfo['Contact Rate'] = " "
balanceGroupInfo['Subscription Rate'] = " "
bal_y = bal_y.set_index(['balGroup'])


for i,val in enumerate(bal_list):
     balanceGroupInfo['Contact Rate'].iloc[i]=bal_y.loc[val].loc['% Contacted']
     balanceGroupInfo['Subscription Rate'].iloc[i]=bal_y.loc[val].loc['% Subscription']
print(balanceGroupInfo)
#bal['bal'] = [1,2,0,3]
#bal = bal.sort_values('bal',ascending = True)

```


```{python}
balanceGroupInfo.plot(x='balanceGroup', kind='bar', stacked=False,
        title='Balance Group Contact Rates and Subscription')
plt.show()
```

People with moderate to high balance, are contacted less but they have high subscription rates so bank should target them more. 


Balance Group versus Job 
```{python}
# add the values for 1 
job_balance = pd.DataFrame(data_vis.groupby(['job','balGroup'])['y'].sum())
# total number of values 
job_balance_count = pd.DataFrame(data_vis.groupby(['job','balGroup'])['y'].count())

job_balance['y'] = (job_balance['y']/job_balance_count['y'])*100
job_balance = job_balance.unstack()
job_balance = job_balance.plot(kind='bar',figsize = (10,6))
plt.title('Subscription Rates for each balance group in job category')
```

Student and Retired are more likely to subscribe and usually have moderate to high balance. 

```{python}
job_balance_count1 = job_balance_count.unstack()
job_balance_count1 = job_balance_count1.plot(kind='bar',figsize = (10,6))
plt.title('Contact for each balance group in job category')
```

## Loan 
covered loan in initial EDA 
```{python}
data_encode = data_vis.copy()
```
# Getting Data Ready for Modelling 

## Encoding

One Hot Encoding 
```{python}
data_encode = pd.get_dummies(data_encode, columns = ['housing'])
data_encode = pd.get_dummies(data_encode, columns = ['loan'])
data_encode = pd.get_dummies(data_encode, columns = ['default'])
data_encode = pd.get_dummies(data_encode, columns = ['job'])
data_encode = pd.get_dummies(data_encode, columns = ['education'])
data_encode = pd.get_dummies(data_encode, columns = ['marital'])
```

Sin - Cos encoding 
```{python}
import math
from math import pi
def sin_transformation(x):
    x=x-1
    sin_x = math.sin((2*pi*x)/11)
    return sin_x
def cos_transformation(x):
    x=x-1
    cos_x = math.cos((2*pi*x)/11)
    return cos_x
data_encode['sin_month'] = data_encode['month_int'].apply(sin_transformation) 
data_encode['cos_month'] = data_encode['month_int'].apply(cos_transformation)  
```
```{python}
sns.scatterplot(data=data_encode,x='sin_month',y='cos_month')
```
Label Encoding 
```{python}
data_encode= data_encode.drop(['month'],axis=1)
#data_encode= data_encode.drop(['month_int'],axis=1)
data_encode = data_encode.drop(['balGroup'],axis=1)
data_encode = data_encode.drop(['pdays'],axis=1)
```

```{python}
# data_encode.to_csv('Dataset/final_encoded.csv',index=False)
```

```{python}
data_model = data_encode.copy()
```


### Dropping the unecessary varibles for modelling 
```{python}
data_model=data_model.drop(['cons.conf.idx', 'emp.var.rate', 'euribor3m', 'nr.employed',
       'cons.price.idx'],axis=1)
```

# Splitting our Dataset 
```{python}
#dropping y to extract x variables 
x = data_model.drop(['y'],axis=1)
#y variables
y = data_model['y']
#splitting the dataset 
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
```

# Balancing Our Dataset
```{python}
sm = SMOTE(random_state=42)
train_sx, train_sy = sm.fit_resample(x_train, y_train)
test_sx, test_sy = sm.fit_resample(x_test, y_test)
#printing x and y values 
np.bincount(train_sy)
```






```{python}
train_sx['sin_month'] = train_sx['month_int'].apply(sin_transformation) 
train_sx['cos_month'] = train_sx['month_int'].apply(cos_transformation) 

sns.scatterplot(data=train_sx,x='sin_month',y='cos_month')
```
```{python}
train_sx= train_sx.drop(['month_int'],axis=1)
test_sx=test_sx.drop(['month_int'],axis=1)
```
```{python}
x_train= x_train.drop(['month_int'],axis=1)
x_test=x_test.drop(['month_int'],axis=1)
```

```{python}
train_balanced = pd.concat([train_sx, train_sy], axis=1)
train_unbalanced = pd.concat([x_train, y_train], axis=1)

test_unbalanced = pd.concat([x_test, y_test], axis=1)
test_balanced = pd.concat([test_sx, test_sy], axis=1)

# train_balanced.to_csv('Dataset/train_balanced.csv',index=False)
# train_unbalanced.to_csv('Dataset/train_unbalanced.csv',index=False)
# test_unbalanced.to_csv('Dataset/test_unbalanced.csv',index=False)
# test_balanced.to_csv('Dataset/test_balanced.csv',index=False)
# print("Before Smote")
# print(f"for training : {np.bincount(y_train)}")
# print(f"for testing : {np.bincount(y_test)}")
# print("After smote")
# print(f"for training : {np.bincount(y_res)}")
# print(f"for testing : {np.bincount(test_sy)}")
```

# Modeling

```{python}
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix 
from sklearn.metrics import classification_report
from sklearn.feature_selection import RFE
```
## Logistic Regression

### Feature Selection 
```{python}
rfe_model = RFE(LogisticRegression(solver='lbfgs', max_iter=1000), step= 25)
rfe_model = rfe_model.fit(x_train,y_train)

# feature selection
print(rfe_model.support_)
print(rfe_model.ranking_)

selected_columns = x_train.columns[rfe_model.support_]
print(selected_columns.tolist())
```


```{python}
X_train_final = x_train[selected_columns.tolist()]
X_test_final = x_test[selected_columns.tolist()]
```


```{python}
lr = LogisticRegression()
lr.fit(x_train, y_train)
y_pred = lr.predict(x_test)
print(f"Accuracy for training set {accuracy_score(y_train, lr.predict(x_train))}")
print(f"Accuracy for testing set {accuracy_score(y_test, y_pred)}")
print(f"Confusion matrix \n{confusion_matrix(y_test, y_pred)}")
print(f"{classification_report(y_test, y_pred)}")
```

```{python}
cut_off = 0.20
precision = []
recall = []
accuracy =[]
def checking_cutoff(cutoff):
    predictions = (lr.predict_proba(x_test)[:,1]>cutoff).astype(int)
    print(f"cutoff = {i:.2f}")
    dictionary = classification_report(y_test, predictions,output_dict=True)
    accuracy.append(float(dictionary['accuracy']))
    print(f"Accuracy {dictionary['accuracy']:.2f} Precision for 1{dictionary['1']['precision']:.2f} Recall for 1 {dictionary['1']['recall']:.2f}")
    print(f"Confusion matrix \n{confusion_matrix(y_test, predictions)}")

cutoffs = np.linspace(0,0.5,5)
for i in cutoffs:
    checking_cutoff(i)
print("\nReady to continue.")
```

```{python}
# Precision-Recall vs Threshold
from sklearn.linear_model import LogisticRegression
#y_pred=logit.predict(x_test)
y_pred_probs=lr.predict_proba(x_test) 
# probs_y is a 2-D array of probability of being labeled as 0 (first 
# column of array) vs 1 (2nd column in array)

from sklearn import metrics
from sklearn.metrics import precision_recall_curve
precision, recall, thresholds = precision_recall_curve(y_test, y_pred_probs[:, 1]) 
#retrieve probability of being 1(in second column of probs_y)
pr_auc = metrics.auc(recall, precision)

plt.title("Precision-Recall vs Threshold Chart")
plt.plot(thresholds, precision[: -1], "b--", label="Precision")
plt.plot(thresholds, recall[: -1], "r--", label="Recall")
plt.ylabel("Precision, Recall")
plt.xlabel("Threshold")
plt.legend(loc="lower left")
plt.ylim([0,1])

print("\nReady to continue.")

```

Based on this curve, we would choose the cut off value as 0.25

Roc - Auc Curve 
```{python}
# Receiver Operator Characteristics (ROC)
# Area Under the Curve (AUC)
from sklearn.metrics import roc_auc_score, roc_curve

# generate a no skill prediction (majority class)
ns_probs = [0 for _ in range(len(y_test))]
# predict probabilities
lr_probs = lr.predict_proba(x_test)
# keep probabilities for the positive outcome only
lr_probs = lr_probs[:, 1]
# calculate scores
ns_auc = roc_auc_score(y_test, ns_probs)
lr_auc = roc_auc_score(y_test, lr_probs)
# summarize scores
print('No Skill: ROC AUC=%.3f' % (ns_auc))
print('Logistic: ROC AUC=%.3f' % (lr_auc))
# calculate roc curves
ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)
lr_fpr, lr_tpr, _ = roc_curve(y_test, lr_probs)
# plot the roc curve for the model
plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')
plt.plot(lr_fpr, lr_tpr, marker='.', label='Logistic')
# aXis labels
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
# show the legend
plt.legend()
# show the plot
plt.show()
```